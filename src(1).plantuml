@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Ability {
  + Ability(): 
}
enum Animal << enumeration >> {
  - Animal(int, Map<String, Integer>, boolean, String): 
  - products: Map<String, Integer>
  - description: String
  - purchaseCost: int
  + valueOf(String): Animal
  + values(): Animal[]
   description: String
   purchaseCost: int
   coopOrBarv: boolean
   products: Map<String, Integer>
}
class AnimalProducts {
  + AnimalProducts(): 
}
interface Animals << interface >>
class App {
  + App(): 
  - currentMenu: Menu
   currentMenu: Menu
}
class AppMenu {
  + AppMenu(): 
  + check(Scanner): void
}
class AppViews {
  + AppViews(): 
  + run(): void
}
class BackPack {
  + BackPack(BackPackTypes): 
  - type: BackPackTypes
  - maxAmount: int
  - tools: List<Tools>
   type: BackPackTypes
   tools: List<Tools>
   maxAmount: int
}
enum BackPackTypes << enumeration >> {
  + BackPackTypes(): 
  + valueOf(String): BackPackTypes
  + values(): BackPackTypes[]
}
class Buff {
  + Buff(): 
  - mainString: String
  - hour: int
  - skill: String
   skill: String
   hour: int
   mainString: String
}
class CageAnimals {
  + CageAnimals(): 
  - animal: Animal
   animal: Animal
}
interface Commands << interface >> {
  + getMatcher(String): Matcher
   regex: String
}
class CoopAnimals {
  + CoopAnimals(): 
  - animal: Animal
   animal: Animal
}
class Craft {
  + Craft(): 
  - description: String
  - type: CraftingRecepie
   description: String
   type: CraftingRecepie
}
enum CraftingCommands << enumeration >> {
  - CraftingCommands(String): 
  - regex: String
  + values(): CraftingCommands[]
  + valueOf(String): CraftingCommands
   regex: String
}
class CraftingController {
  + CraftingController(): 
  + showRecipes(): Result
  + placeItem(String, String): void
  + showCraftInto(Craft): Result
  + addItem(String, int): void
  + makingCraft(String): Craft
}
enum CraftingRecepie << enumeration >> {
  + CraftingRecepie(): 
  + values(): CraftingRecepie[]
  + valueOf(String): CraftingRecepie
}
class Date {
  + Date(int, int, String, Season, int, int, int): 
  ~ month: int
  ~ minute: int
  ~ day: String
  ~ season: Season
  ~ dayOfMonth: int
  ~ hour: int
  ~ year: int
   year: int
   season: Season
   hour: int
   month: int
   minute: int
   day: String
   dayOfMonth: int
}
enum DateCommands << enumeration >> {
  - DateCommands(String): 
  - regex: String
  + values(): DateCommands[]
  + valueOf(String): DateCommands
   regex: String
}
class DateController {
  + DateController(): 
  + changeDate(): void
  + cheatAdvancedTime(): Result
  + showCurrentDate(): Result
  + changeTime(): void
  + dateTime(): Result
  + showCurrentSeason(): Result
  + cheatAdvancedDate(): Result
  + dayOfWeek(): Result
  + showCurrentTime(): Result
  + changeSeason(): void
}
class Energy {
  + Energy(int): 
}
enum EnergyCommands << enumeration >> {
  - EnergyCommands(String): 
  - regex: String
  + valueOf(String): EnergyCommands
  + values(): EnergyCommands[]
   regex: String
}
class EnergyController {
  + EnergyController(): 
  + showEnergy(): Result
  + trashInventory(): void
  + setUnlimitedEnergy(): void
  + loseTurn(): void
  + showInventory(): Result
   energy: int
}
class ExitMenu {
  + ExitMenu(): 
  + check(Scanner): void
}
class Farm {
  + Farm(): 
  - trees: Map<TreesTypes, Integer>
  - quarry: Quarry
  - owners: ArrayList<User>
  - shack: Shack
  - stones: Map<Stones, Integer>
  - lakes: ArrayList<Lake>
  - greenHouse: GreenHouse
   greenHouse: GreenHouse
   stones: Map<Stones, Integer>
   owners: ArrayList<User>
   shack: Shack
   lakes: ArrayList<Lake>
   quarry: Quarry
   trees: Map<TreesTypes, Integer>
}
class FarmSetUp {
  + FarmSetUp(): 
  + lakeSetUp(LocationOfRectangle): Lake
  + shackSetUp(GreenHouse): Shack
  + randomForaging(): ArrayList<Location>
  + greenHouseSetUp(LocationOfRectangle): GreenHouse
  + quarrySetUp(LocationOfRectangle): Quarry
   foragingTypes: ArrayList<Location>
}
class FarmingController {
  + FarmingController(): 
  + plantSeed(String, String): void
  + showPlant(): Result
  + fertilizePlant(String, String): void
  + harvestPlant(String, String): void
  + howMuchWater(): Result
  + plow(): void
  + waterPlant(String, String): void
}
class Fish {
  + Fish(): 
  ~ fishtype: Fish
  + fishing(StoreProducts): ProductType
   fishtype: Fish
}
enum Fish << enumeration >> {
  - Fish(int, Set<Season>, boolean): 
  - isLegendary: boolean
  - basePrice: int
  - seasons: Set<Season>
  + values(): Fish[]
  + valueOf(String): Fish
   basePrice: int
   seasons: Set<Season>
   isLegendary: boolean
}
class Food {
  + Food(String, FoodType): 
  - name: String
  - foodType: FoodType
   foodType: FoodType
   name: String
}
enum FoodCommands << enumeration >> {
  - FoodCommands(String): 
  + getMather(String): Matcher?
  + values(): FoodCommands[]
  + valueOf(String): FoodCommands
}
class FoodController {
  + FoodController(): 
  + showRecipes(User): Result
  + put_pick(Food): Result
  + eatFood(String): Result
  + prepareFood(Recipes): Result
}
enum FoodType << enumeration >> {
  - FoodType(int, String, int, Buff): 
  - ingredients: Map<ProductType, Integer>
  + values(): FoodType[]
  + valueOf(String): FoodType
   ingredients: Map<ProductType, Integer>
}
class Fruits {
  + Fruits(String, String, String, int, boolean, boolean, int, double, boolean, int, Season, boolean): 
  - collectDay: int
  - isEdible: boolean
  - giganticGrowth: boolean
  - isCollected: boolean
  - fullGrowthtime: int
  - season: Season
  - energyGain: int
  - origin: String
  - type: String
  - canCollect: boolean
  - price: double
  - fruitName: String
  - stage: int
   type: String
   origin: String
   fullGrowthtime: int
   giganticGrowth: boolean
   collectDay: int
   fruitName: String
   isEdible: boolean
   energyGain: int
   season: Season
   price: double
   canCollect: boolean
   isCollected: boolean
   stage: int
}
class Game {
  + Game(): 
  ~ userAndMap: Map<map, User>
  - gameId: int
   gameId: int
   userAndMap: Map<map, User>
}
class GameMenu {
  + GameMenu(): 
  + dayOfWeek(): void
  + cheatAdvancedDate(): void
  + showCurrentTime(): void
  + showCurrentSeason(): void
  + dateTime(): void
  + cheatAdvancedTime(): void
  + showCurrentDate(): void
  + check(Scanner): void
}
enum GameMenuCommands << enumeration >> {
  - GameMenuCommands(String): 
  - regex: String
  + values(): GameMenuCommands[]
  + getMatcher(String): Matcher
  + valueOf(String): GameMenuCommands
   regex: String
}
class GameMenuController {
  + GameMenuController(): 
  + newGame(): Result
  + savingMap(Map<map, User>): void
  + deleteGame(int): Result
  + readingMap(): void
  + loadGame(): Result
  + nextTurn(): void
  + energyUnlimited(): void
  + sellProducts(String, int): Result
  + choosingMap(int): map
  + tradeHistory(User): void
}
class Gift {
  + Gift(): 
}
class GreenHouse {
  + GreenHouse(): 
  ~ greenHouseLocation: LocationOfRectangle
   greenHouseLocation: LocationOfRectangle
}
class Lake {
  + Lake(): 
  ~ lakeLocation: LocationOfRectangle
   lakeLocation: LocationOfRectangle
}
class Location {
  + Location(int, int): 
  - yAxis: int
  - xAxis: int
   yAxis: int
   xAxis: int
}
class LocationOfRectangle {
  + LocationOfRectangle(Location, Location): 
  ~ topLeftCorner: Location
  ~ downRightCorner: Location
   topLeftCorner: Location
   downRightCorner: Location
}
class LoginRegisterMenu {
  + LoginRegisterMenu(): 
  + check(Scanner): void
}
enum LoginRegisterMenuCommands << enumeration >> {
  - LoginRegisterMenuCommands(String): 
  - regex: String
  + values(): LoginRegisterMenuCommands[]
  + getMatcher(String): Matcher
  + valueOf(String): LoginRegisterMenuCommands
   regex: String
}
class LoginRegisterMenuController {
  + LoginRegisterMenuController(): 
  + checkUserName(String): User
  + login(String, String): Result
  + saveSecureHashAlgorithm(String): void
  + RandomPassword(String): String
  + register(String, String): Result
  + pickQuestion(String): Result
}
class Main {
  + Main(): 
  + main(String[]): void
}
class MainMenu {
  + MainMenu(): 
  + check(Scanner): void
}
enum MainMenuCommands << enumeration >> {
  - MainMenuCommands(String): 
  - regex: String
  + values(): MainMenuCommands[]
  + getMatcher(String): Matcher
  + valueOf(String): MainMenuCommands
   regex: String
}
class MainMenuController {
  + MainMenuController(): 
  + logOut(): void
}
class MapInfo {
  + MapInfo(): 
}
enum Menu << enumeration >> {
  - Menu(AppMenu): 
  + checkCommand(Scanner): void
  + valueOf(String): Menu
  + values(): Menu[]
}
interface MenuController << interface >> {
  + menuExit(): void
  + menuEnter(): Result?
  + showMenu(): Result?
}
class NPC {
  + NPC(): 
}
class NPCcontroller {
  + NPCcontroller(): 
  + canSpeak(Location, Location): boolean
  + meetNPC(NPC): void
  + giftNPC(NPC, Gift): void
}
enum NPCdetails << enumeration >> {
  + NPCdetails(): 
  + valueOf(String): NPCdetails
  + values(): NPCdetails[]
}
class NPCvillage {
  + NPCvillage(): 
}
interface Place << interface >> {
  + locationOfRectangle(): LocationOfRectangle
}
enum ProductType << enumeration >> {
  + ProductType(): 
  + valueOf(String): ProductType
  + values(): ProductType[]
}
interface Products << interface >> {
  + name: String
  + price: int
   price: int
   name: String
}
class ProfileMenu {
  + ProfileMenu(): 
  + check(Scanner): void
}
enum ProfileMenuCommands << enumeration >> {
  - ProfileMenuCommands(String): 
  - regex: String
  + values(): ProfileMenuCommands[]
  + valueOf(String): ProfileMenuCommands
  + getMatcher(String): Matcher
   regex: String
}
class ProfileMenuController {
  + ProfileMenuController(): 
  + changeNickname(String): Result
  + changePassword(String): Result
  + changeUserName(String): Result
  + userInfo(): Result
}
class Quarry {
  + Quarry(): 
  ~ quarryLocation: LocationOfRectangle
   quarryLocation: LocationOfRectangle
}
class Quest {
  + Quest(): 
}
class Recipes {
  + Recipes(): 
  - mapOfRecipes: String
  - ingredient: ArrayList<Food>
   ingredient: ArrayList<Food>
   mapOfRecipes: String
}
class Refrigrator {
  + Refrigrator(): 
  - products: ArrayList<Products>
  - foodMade: ArrayList<Food>
  - maxProduction: int
  + addFoodMade(Food): void
  + addProducts(Products): void
   foodMade: ArrayList<Food>
   products: ArrayList<Products>
   maxProduction: int
}
class RelationShip {
  + RelationShip(): 
  - twoParties: Map<User, User>
  - talk: ArrayList<String>
  - gifts: ArrayList<Gift>
  - levelOfRelationShip: int
  - talk_u(): void
   levelOfRelationShip: int
   talk: ArrayList<String>
   twoParties: Map<User, User>
   gifts: ArrayList<Gift>
}
class RelationshipController {
  + RelationshipController(): 
  + respondMarriageRequest(RelationShip, String): Result
  + giftList(): void
  + hug(): void
  + buyGift(User, RelationShip): Result
  + tradeRespond(): Result
  + giftrate(Gift, int): void
  + trade(String): void
  + askMarriage(RelationShip, String, User): Result
  + respondTotrade(Trade): void
  + startTrade(): void
}
entity Result << record >> {
  + Result(String, boolean): 
  + message(): String
  + success(): boolean
}
enum Season << enumeration >> {
  + Season(): 
  + values(): Season[]
  + valueOf(String): Season
}
class Shack {
  + Shack(): 
  ~ shackLocation: LocationOfRectangle
   shackLocation: LocationOfRectangle
}
enum Stones << enumeration >> {
  + Stones(): 
  + values(): Stones[]
  + valueOf(String): Stones
}
class Store {
  + Store(): 
  - storeProducts: ArrayList<StoreProducts>
  - owner: String
  - nameOfStore: String
  - StartHour: int
  - CloseHour: int
  - shackLocation: LocationOfRectangle
   CloseHour: int
   shackLocation: LocationOfRectangle
   owner: String
   storeProducts: ArrayList<StoreProducts>
   StartHour: int
   nameOfStore: String
}
class StoreController {
  + StoreController(): 
  + getStoreProducts(String): StoreProducts
  + addCount(): void
  + buyProduct(String, int): void
  + isStoreOpen(Store, Date): boolean
  + showTotalProducts(List<Store>): void
  + findStore(Location): Store
  + ShowProducts(Store): void
}
class StoreProducts {
  + StoreProducts(): 
}
enum ToolCommands << enumeration >> {
  - ToolCommands(String): 
  - regex: String
  + values(): ToolCommands[]
  + valueOf(String): ToolCommands
   regex: String
}
enum ToolTypes << enumeration >> {
  - ToolTypes(int): 
  - energyDamage: int
  + values(): ToolTypes[]
  + valueOf(String): ToolTypes
   energyDamage: int
}
class Tools {
  + Tools(ToolTypes, String): 
}
class ToolsController {
  + ToolsController(): 
  + checkMoves(): void
  + checkIsInSmithing(): boolean
  + equipTools(): void
  + useTools(): void
  + showToolsAvailable(): Result
  + checkBackPack(): void
  + checkEnergy(): boolean
  + updateToolsCheck(String, boolean): Result
  + checkUpdateToolMoney(): boolean
  + updateTools(): void
  + checkToolUse(): Result
  + showCurrentTool(): Result
   validUse: boolean
}
class Trade {
  + Trade(): 
}
enum TrashcanTypes << enumeration >> {
  - TrashcanTypes(double): 
  - recoveryRate: double
  + valueOf(String): TrashcanTypes
  + values(): TrashcanTypes[]
   recoveryRate: double
}
class TreeProducts {
  + TreeProducts(): 
}
enum TreesTypes << enumeration >> {
  - TreesTypes(Location, int): 
  - watering: int
  - location: Location
  + values(): TreesTypes[]
  + valueOf(String): TreesTypes
   watering: int
   location: Location
}
enum TypeOfTile << enumeration >> {
  + TypeOfTile(): 
  + values(): TypeOfTile[]
  + valueOf(String): TypeOfTile
}
class User {
  + User(): 
}
class UserLocationController {
  + UserLocationController(): 
  + goToDestinationProcess(ArrayList<Location>): void
  + printMap(Location, int): Result
  + path(Location, Location): ArrayList<Location>
  + isDestinationValid(Location): boolean
}
class Weather {
  + Weather(String, List<Season>): 
  - seasons: List<Season>
  - name: String
  + addSeason(Season): void
   name: String
   seasons: List<Season>
}
enum WeatherCommands << enumeration >> {
  - WeatherCommands(String): 
  - regex: String
  + valueOf(String): WeatherCommands
  + values(): WeatherCommands[]
   regex: String
}
class WeatherController {
  + WeatherController(): 
  + weatherForecast(): Result
  + checkGreenhouseCondition(): boolean
  + strikeThunder(ArrayList<Location>): void
  + greenhouseBuild(): void
  + showCurrentWeather(): Result
  + chooseLocation(): void
  + cheatWeatherSet(): Result
  + randomThreeLocationsThunder(): ArrayList<Location>
  + enterNextDay(): void
}
class map {
  + map(): 
  + NPC: ArrayList<NPCvillage>
  - allLocations: ArrayList<Location>
  - farms: ArrayList<Farm>
  - allStores: List<Store>
  - mapNumber: int
   allLocations: ArrayList<Location>
   farms: ArrayList<Farm>
   NPC: ArrayList<NPCvillage>
   mapNumber: int
   allStores: List<Store>
}
class movingNPCs {
  + movingNPCs(): 
}

AnimalProducts               -[#008200,dashed]-^  Products                    
App                         "1" *-[#595959,plain]-> "fullTime\n1" Date                        
App                         "1" *-[#595959,plain]-> "game\n*" Game                        
App                         "1" *-[#595959,plain]-> "currentMenu\n1" Menu                        
App                         "1" *-[#595959,plain]-> "users\n*" User                        
BackPack                    "1" *-[#595959,plain]-> "type\n1" BackPackTypes               
BackPack                    "1" *-[#595959,plain]-> "tools\n*" Tools                       
CageAnimals                 "1" *-[#595959,plain]-> "animal\n1" Animal                      
CageAnimals                  -[#008200,dashed]-^  Animals                     
CoopAnimals                 "1" *-[#595959,plain]-> "animal\n1" Animal                      
CoopAnimals                  -[#008200,dashed]-^  Animals                     
Craft                       "1" *-[#595959,plain]-> "type\n1" CraftingRecepie             
CraftingController           -[#595959,dashed]->  Craft                       : "«create»"
Date                        "1" *-[#595959,plain]-> "season\n1" Season                      
ExitMenu                     -[#000082,plain]-^  AppMenu                     
Farm                        "1" *-[#595959,plain]-> "greenHouse\n1" GreenHouse                  
Farm                        "1" *-[#595959,plain]-> "lakes\n*" Lake                        
Farm                         -[#008200,dashed]-^  Place                       
Farm                        "1" *-[#595959,plain]-> "quarry\n1" Quarry                      
Farm                        "1" *-[#595959,plain]-> "shack\n1" Shack                       
Farm                        "1" *-[#595959,plain]-> "stones\n*" Stones                      
Farm                        "1" *-[#595959,plain]-> "trees\n*" TreesTypes                  
Farm                        "1" *-[#595959,plain]-> "owners\n*" User                        
FarmSetUp                    -[#595959,dashed]->  GreenHouse                  : "«create»"
FarmSetUp                    -[#595959,dashed]->  Lake                        : "«create»"
FarmSetUp                    -[#595959,dashed]->  Quarry                      : "«create»"
FarmSetUp                    -[#595959,dashed]->  Shack                       : "«create»"
Fish                         -[#008200,dashed]-^  Animals                     
Fish                        "1" *-[#595959,plain]-> "seasons\n*" Season                      
Food                        "1" *-[#595959,plain]-> "foodType\n1" FoodType                    
FoodType                    "1" *-[#595959,plain]-> "buff\n1" Buff                        
FoodType                    "1" *-[#595959,plain]-> "ingredients\n*" ProductType                 
Fruits                      "1" *-[#595959,plain]-> "season\n1" Season                      
Game                        "1" *-[#595959,plain]-> "userAndMap\n*" User                        
Game                        "1" *-[#595959,plain]-> "userAndMap\n*" map                         
GameMenu                     -[#000082,plain]-^  AppMenu                     
GameMenuCommands             -[#008200,dashed]-^  Commands                    
GameMenuController           -[#008200,dashed]-^  MenuController              
Gift                         +-[#820000,plain]-  RelationShip                
GreenHouse                  "1" *-[#595959,plain]-> "greenHouseLocation\n1" LocationOfRectangle         
GreenHouse                   -[#008200,dashed]-^  Place                       
Lake                        "1" *-[#595959,plain]-> "lakeLocation\n1" LocationOfRectangle         
Lake                         -[#008200,dashed]-^  Place                       
Location                    "1" *-[#595959,plain]-> "typeOfTile\n1" TypeOfTile                  
LocationOfRectangle          +-[#820000,plain]-  Location                    
LocationOfRectangle         "1" *-[#595959,plain]-> "topLeftCorner\n1" Location                    
LoginRegisterMenu            -[#000082,plain]-^  AppMenu                     
LoginRegisterMenuCommands    -[#008200,dashed]-^  Commands                    
LoginRegisterMenuController  -[#008200,dashed]-^  MenuController              
Main                         -[#595959,dashed]->  AppViews                    : "«create»"
MainMenu                     -[#000082,plain]-^  AppMenu                     
MainMenuCommands             -[#008200,dashed]-^  Commands                    
MainMenuController           -[#008200,dashed]-^  MenuController              
Menu                        "1" *-[#595959,plain]-> "menu\n1" AppMenu                     
Menu                         -[#595959,dashed]->  ExitMenu                    : "«create»"
Menu                         -[#595959,dashed]->  GameMenu                    : "«create»"
Menu                         -[#595959,dashed]->  LoginRegisterMenu           : "«create»"
Menu                         -[#595959,dashed]->  MainMenu                    : "«create»"
Menu                         -[#595959,dashed]->  ProfileMenu                 : "«create»"
NPC                         "1" *-[#595959,plain]-> "userLocation\n1" Location                    
NPC                         "1" *-[#595959,plain]-> "details\n1" NPCdetails                  
NPC                         "1" *-[#595959,plain]-> "quests\n*" Quest                       
NPC                         "1" *-[#595959,plain]-> "Refrigrator\n1" Refrigrator                 
NPC                          -[#595959,dashed]->  Refrigrator                 : "«create»"
NPC                         "1" *-[#595959,plain]-> "shack\n1" Shack                       
NPCvillage                  "1" *-[#595959,plain]-> "NPCs\n*" NPC                         
NPCvillage                   -[#008200,dashed]-^  Place                       
ProfileMenu                  -[#000082,plain]-^  AppMenu                     
ProfileMenuCommands          -[#008200,dashed]-^  Commands                    
ProfileMenuController        -[#008200,dashed]-^  MenuController              
Quarry                      "1" *-[#595959,plain]-> "quarryLocation\n1" LocationOfRectangle         
Quarry                       -[#008200,dashed]-^  Place                       
Quest                        +-[#820000,plain]-  NPC                         
Recipes                     "1" *-[#595959,plain]-> "ingredient\n*" Food                        
Refrigrator                 "1" *-[#595959,plain]-> "foodMade\n*" Food                        
Refrigrator                 "1" *-[#595959,plain]-> "products\n*" Products                    
RelationShip                "1" *-[#595959,plain]-> "gifts\n*" Gift                        
RelationShip                "1" *-[#595959,plain]-> "twoParties\n*" User                        
Shack                       "1" *-[#595959,plain]-> "shackLocation\n1" LocationOfRectangle         
Shack                        -[#008200,dashed]-^  Place                       
Store                       "1" *-[#595959,plain]-> "shackLocation\n1" LocationOfRectangle         
Store                        -[#008200,dashed]-^  Place                       
Store                       "1" *-[#595959,plain]-> "storeProducts\n*" StoreProducts               
StoreController              -[#595959,dashed]->  StoreProducts               : "«create»"
StoreProducts                -[#008200,dashed]-^  Products                    
Tools                       "1" *-[#595959,plain]-> "type\n1" ToolTypes                   
Trade                        +-[#820000,plain]-  RelationShip                
Trade                       "1" *-[#595959,plain]-> "twoParties\n*" User                        
TreeProducts                 -[#008200,dashed]-^  Products                    
TreesTypes                  "1" *-[#595959,plain]-> "location\n1" Location                    
User                        "1" *-[#595959,plain]-> "abilitis\n*" Ability                     
User                        "1" *-[#595959,plain]-> "energy\n1" Energy                      
User                        "1" *-[#595959,plain]-> "userLocation\n1" Location                    
User                        "1" *-[#595959,plain]-> "Refrigrator\n1" Refrigrator                 
User                         -[#595959,dashed]->  Refrigrator                 : "«create»"
User                        "1" *-[#595959,plain]-> "relationShips\n*" RelationShip                
User                        "1" *-[#595959,plain]-> "shack\n1" Shack                       
User                        "1" *-[#595959,plain]-> "trade\n*" Trade                       
User                        "1" *-[#595959,plain]-> "map\n1" map                         
Weather                     "1" *-[#595959,plain]-> "seasons\n*" Season                      
map                         "1" *-[#595959,plain]-> "farms\n*" Farm                        
map                         "1" *-[#595959,plain]-> "allLocations\n*" Location                    
map                         "1" *-[#595959,plain]-> "NPC\n*" NPCvillage                  
map                         "1" *-[#595959,plain]-> "allStores\n*" Store                       
@enduml
